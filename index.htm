<!doctype html>
<html lang="en">
	<head>
		<title>Asiph Game</title>
		<!-- need to add meta tags  -->
		<link href="http://maxcdn.bootstrapcdn.com/bootswatch/3.3.0/paper/bootstrap.min.css" rel="stylesheet">
		<link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
		<link href="css/custom.css" rel="stylesheet">
		<script src="js/phaser.min.js"></script>
	</head>
	<body>

		<header>
			<section class="hero">
				<div class="container-fluid">

					<div class="row">
						<div class="col-md-8 col-md-offset-2 text-center inner">
							<h1><li class="fa fa-bolt -o"> Asiph</h1>
							<p class="lead"><span>Break out of jail. Regain your former abilities. Kick some serious ass.</span></p>
						</div>
					</div>
					<div class="row">
						<div class="col-md-6 col-md-offset-3 text-center">
							<a href="#About" class="btn btn-default">Learn More</a>
							<br /> - OR - <br />
							<a href="#GetStarted" class="btn btn-default">Play Now</a>
						</div>
					</div>

				</div>
			</section>
		</header>
		
		<section class="features text-center section-padding" id="features">
			<div class="container">
				<div class="row">
					<div class="col-md-12">
						<br />
						<blockquote>Learning was never so fun.</blockquote>
						<br />
						<div class="features-wrapper">
							<div class="col-md-4 wp2">
								<div class="icon">
									<i class="fa fa-child  shadow"></i>
								</div>
								<h2>Simple</h2>
								<p>
									
								</p>
							</div>
							<div class="col-md-4 wp2">
								<div class="icon">
									<i class="fa fa-puzzle-piece shadow"></i>
								</div>
								<h2>Fun</h2>
								<p>
									
								</p>
							</div>
							<div class="col-md-4 wp2">
								<div class="icon">
									<i class="fa fa-book shadow"></i>
								</div>
								<h2>Educational</h2>
								<p>
									
								</p>
							</div>
							<div class="clearfix"></div>
						</div>
					</div>
				</div>
			</div>
		</section>
	
		
	
	
	<section>
	
	<script type="text/javascript">

		window.onload = function() {

			EnemyTank = function (index, game, player, bullets) {

			    var x = game.world.randomX;
			    var y = game.world.randomY;

			    this.game = game;
			    this.health = 3;
			    this.player = player;
			    this.bullets = bullets;
			    this.fireRate = 1000;
			    this.nextFire = 0;
			    this.alive = true;

			    this.shadow = game.add.sprite(x, y, 'enemy', 'shadow');
			    this.tank = game.add.sprite(x, y, 'enemy', 'tank1');
			    this.turret = game.add.sprite(x, y, 'enemy', 'turret');

			    this.shadow.anchor.set(0.5);
			    this.tank.anchor.set(0.5);
			    this.turret.anchor.set(0.3, 0.5);

			    this.tank.name = index.toString();
			    game.physics.enable(this.tank, Phaser.Physics.ARCADE);
			    this.tank.body.immovable = false;
			    this.tank.body.collideWorldBounds = true;
			    this.tank.body.bounce.setTo(1, 1);

			    this.tank.angle = game.rnd.angle();

			    game.physics.arcade.velocityFromRotation(this.tank.rotation, 100, this.tank.body.velocity);
			};

			EnemyTank.prototype.damage = function() {

			    this.health -= 1;

			    if (this.health <= 0) {
			        this.alive = false;

			        this.shadow.kill();
			        this.tank.kill();
			        this.turret.kill();

			        return true;
			    }

			    return false;
			}

			EnemyTank.prototype.update = function() {

			    this.shadow.x = this.tank.x;
			    this.shadow.y = this.tank.y;
			    this.shadow.rotation = this.tank.rotation;

			    this.turret.x = this.tank.x;
			    this.turret.y = this.tank.y;
			    this.turret.rotation = this.game.physics.arcade.angleBetween(this.tank, this.player);

			    if (this.game.physics.arcade.distanceBetween(this.tank, this.player) < 300) {
			        if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0) {
			            this.nextFire = this.game.time.now + this.fireRate;

			            var bullet = this.bullets.getFirstDead();
			            bullet.reset(this.turret.x, this.turret.y);
			            bullet.rotation = this.game.physics.arcade.moveToObject(bullet, this.player, 500);
			        }
			    }
			};

			var game = new Phaser.Game(800, 600, Phaser.AUTO, 'phaser-game', { preload: preload, create: create, update: update, render: render });

			function preload () {
			    game.load.atlas('tank', '../assets/tanks.png', '../assets/tanks.json');
			    game.load.atlas('enemy', '../assets/enemy-tanks.png', '../assets/tanks.json');
			    game.load.image('logo', '../assets/logo.png');
			    game.load.image('bullet', '../assets/bullet.png');
			    game.load.image('earth', '../assets/scorched_earth.png');
			    game.load.spritesheet('kaboom', '../assets/explosion.png', 64, 64, 23);
			}

			var land;

			var shadow;
			var tank;
			var turret;

			var enemies;
			var enemyBullets;
			var enemiesTotal = 0;
			var enemiesAlive = 0;
			var explosions;

			var logo;

			var currentSpeed = 0;
			var cursors;

			var bullets;
			var fireRate = 100;
			var nextFire = 0;

			function create () {

			    //  Resize our game world to be a 2000 x 2000 square
			    game.world.setBounds(-1000, -1000, 2000, 2000);

			    //  Our tiled scrolling background
			    land = game.add.tileSprite(0, 0, 800, 600, 'earth');
			    land.fixedToCamera = true;

			    //  The base of our tank
			    tank = game.add.sprite(0, 0, 'tank', 'tank1');
			    tank.anchor.setTo(0.5, 0.5);
			    tank.animations.add('move', ['tank1', 'tank2', 'tank3', 'tank4', 'tank5', 'tank6'], 20, true);

			    //  This will force it to decelerate and limit its speed
			    game.physics.enable(tank, Phaser.Physics.ARCADE);
			    tank.body.drag.set(0.2);
			    tank.body.maxVelocity.setTo(400, 400);
			    tank.body.collideWorldBounds = true;

			    //  Finally the turret that we place on-top of the tank body
			    turret = game.add.sprite(0, 0, 'tank', 'turret');
			    turret.anchor.setTo(0.3, 0.5);

			    //  The enemies bullet group
			    enemyBullets = game.add.group();
			    enemyBullets.enableBody = true;
			    enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
			    enemyBullets.createMultiple(100, 'bullet');
    
			    enemyBullets.setAll('anchor.x', 0.5);
			    enemyBullets.setAll('anchor.y', 0.5);
			    enemyBullets.setAll('outOfBoundsKill', true);
			    enemyBullets.setAll('checkWorldBounds', true);

			    //  Create some baddies to waste :)
			    enemies = [];

			    enemiesTotal = 20;
			    enemiesAlive = 20;

			    for (var i = 0; i < enemiesTotal; i++)
			    {
			        enemies.push(new EnemyTank(i, game, tank, enemyBullets));
			    }

			    //  A shadow below our tank
			    shadow = game.add.sprite(0, 0, 'tank', 'shadow');
			    shadow.anchor.setTo(0.5, 0.5);

			    //  Our bullet group
			    bullets = game.add.group();
			    bullets.enableBody = true;
			    bullets.physicsBodyType = Phaser.Physics.ARCADE;
			    bullets.createMultiple(30, 'bullet', 0, false);
			    bullets.setAll('anchor.x', 0.5);
			    bullets.setAll('anchor.y', 0.5);
			    bullets.setAll('outOfBoundsKill', true);
			    bullets.setAll('checkWorldBounds', true);

			    //  Explosion pool
			    explosions = game.add.group();

			    for (var i = 0; i < 10; i++) {
			        var explosionAnimation = explosions.create(0, 0, 'kaboom', [0], false);
			        explosionAnimation.anchor.setTo(0.5, 0.5);
			        explosionAnimation.animations.add('kaboom');
			    }

			    tank.bringToTop();
			    turret.bringToTop();

			    logo = game.add.sprite(0, 200, 'logo');
			    logo.fixedToCamera = true;

			    game.input.onDown.add(removeLogo, this);

			    game.camera.follow(tank);
			    game.camera.deadzone = new Phaser.Rectangle(150, 150, 500, 300);
			    game.camera.focusOnXY(0, 0);

			    cursors = game.input.keyboard.createCursorKeys();

			}

			function removeLogo () {

			    game.input.onDown.remove(removeLogo, this);
			    logo.kill();

			}

			function update () {

			    game.physics.arcade.overlap(enemyBullets, tank, bulletHitPlayer, null, this);

			    enemiesAlive = 0;

			    for (var i = 0; i < enemies.length; i++)
			    {
			        if (enemies[i].alive)
			        {
			            enemiesAlive++;
			            game.physics.arcade.collide(tank, enemies[i].tank);
			            game.physics.arcade.overlap(bullets, enemies[i].tank, bulletHitEnemy, null, this);
			            enemies[i].update();
			        }
			    }

			    if (cursors.left.isDown)
			    {
			        tank.angle -= 4;
			    }
			    else if (cursors.right.isDown)
			    {
			        tank.angle += 4;
			    }

			    if (cursors.up.isDown)
			    {
			        //  The speed we'll travel at
			        currentSpeed = 300;
			    }
			    else
			    {
			        if (currentSpeed > 0)
			        {
			            currentSpeed -= 4;
			        }
			    }

			    if (currentSpeed > 0)
			    {
			        game.physics.arcade.velocityFromRotation(tank.rotation, currentSpeed, tank.body.velocity);
			    }

			    land.tilePosition.x = -game.camera.x;
			    land.tilePosition.y = -game.camera.y;

			    //  Position all the parts and align rotations
			    shadow.x = tank.x;
			    shadow.y = tank.y;
			    shadow.rotation = tank.rotation;

			    turret.x = tank.x;
			    turret.y = tank.y;

			    turret.rotation = game.physics.arcade.angleToPointer(turret);

			    if (game.input.activePointer.isDown)
			    {
			        //  Boom!
			        fire();
			    }

			}

			function bulletHitPlayer (tank, bullet) {

			    bullet.kill();

			}

			function bulletHitEnemy (tank, bullet) {

			    bullet.kill();

			    var destroyed = enemies[tank.name].damage();

			    if (destroyed)
			    {
			        var explosionAnimation = explosions.getFirstExists(false);
			        explosionAnimation.reset(tank.x, tank.y);
			        explosionAnimation.play('kaboom', 30, false, true);
			    }

			}

			function fire () {

			    if (game.time.now > nextFire && bullets.countDead() > 0)
			    {
			        nextFire = game.time.now + fireRate;

			        var bullet = bullets.getFirstExists(false);

			        bullet.reset(turret.x, turret.y);

			        bullet.rotation = game.physics.arcade.moveToPointer(bullet, 1000, game.input.activePointer, 500);
			    }

			}

			function render () {
			    // game.debug.text('Active Bullets: ' + bullets.countLiving() + ' / ' + bullets.length, 32, 32);
			    game.debug.text('Enemies: ' + enemiesAlive + ' / ' + enemiesTotal, 32, 32);
			}

		};

	</script>
	</section>
	
	
	
	
	
		<section id="GetStarted" class="text-center start-cta">
			<h3>Newsletter</h3>
			<form class="form-inline" role="form">
				<div class="form-group">
					<div class="input-group">
						<label class="sr-only" for="Email">Enter your Email: </label>
						<input type="text" class="form-control" id="Email" placeholder="Example: Email@yourmom.com">
					</div>
				</div>
				<button type="submit" class="btn btn-default">Go</button> 
			</form>
		</section>
	
	
	<!--			
		<section id="About">
			<h2>About</h2>
			<p>
				Text explaining about it...
			</p>
		</section>
		
		
		
		<section id="Team">
			<h2>Team us...</h2>
			Cols = number of team members, atm = 2.
		</section>
-->
		<footer>
			<div class="container">
				<div class="row">
					<div class="col-md-6">
						<ul class="legals">
							<li><a href="#">Terms &amp; Conditions</a></li> <!-- need to write up... -->
							<li><a href="#">Legals</a></li> <!-- know anyone versed in law? -->
						</ul>
					</div>
					<div class="col-md-6 credit">
						<p>&copy; 2014 <!-- date() --> Asiph, All Rights Reserved</p>
					</div>
				</div>
			</div>
        </footer>
		
		<!-- Javascript at the bottom of the page to speed load time -->
		<script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
	</body>
</html>